import re

# Définition de la fonction qui parcourt la base de données
def parcourir_dpe(dpe):
    # Création du nouveau DataFrame
    df = pd.DataFrame(columns=['numero_dpe', 'type_voie', 'nom_rue', 'numero_rue', 'commune', 'code_insee_commune'])

    # Parcours de la base de données
    for index, row in dpe.iterrows():
        # Récupération des valeurs des colonnes pour chaque ligne
        numero_dpe = row['numero_dpe']
        type_voie = row['type_voie']
        nom_rue = row['nom_rue']
        numero_rue = row['numero_rue']
        commune = row['commune']
        code_insee_commune = row['code_insee_commune']

        # Extraction du numéro de rue et du nom de rue
        num_rue_regex = re.search(r'^(\d+\s*)?(.*)$', numero_rue)
        num_rue = num_rue_regex.group(1)
        nom_rue = num_rue_regex.group(2).strip()

        # Extraction du type de voie
        type_voie_regex = re.search(r'^(.*)\s+(?:AVENUE|AV|ALLEE|ALL|IMPASSE|IMP|RUE|PL|PLACE|BOULEVARD|BD|CHEMIN|CH|ROUTE|RP|TRONCON|QUAI|PONT)\b', nom_rue)
        if type_voie_regex is not None:
            type_voie = type_voie_regex.group(1).strip()

        # Extraction du numéro d'appartement
        num_app_regex = re.search(r'\b(?:(?:BAT|B|APPARTEMENT|APP)\s*(\S+)|N°\s*(\S+))\b', numero_rue)
        if num_app_regex is not None:
            num_app = num_app_regex.group(1) or num_app_regex.group(2)
            num_rue = re.sub(num_app_regex.group(0), '', numero_rue).strip()
        else:
            num_app = ''

        # Ajout d'une ligne dans le nouveau DataFrame avec les valeurs récupérées
        df.loc[index] = [numero_dpe, type_voie, nom_rue, num_rue, commune, code_insee_commune, num_app]

    # Retour du nouveau DataFrame
    return df
